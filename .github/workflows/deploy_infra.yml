name: Deploy EKS Cluster

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Cache Terraform Modules
      uses: actions/cache@v2
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}-${{ github.run_number }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.5.7

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: terraform-plan
      run: terraform plan -out=tfplan -detailed-exitcode
      continue-on-error: true

    - name: Check Plan Result and Apply
      id: check-plan
      run: |
        if [[ ${{ steps.terraform-plan.outcome }} == 'failure' ]]; then
          exit_code=${{ steps.terraform-plan.outputs.exit-code }}
          if [ $exit_code -eq 0 ]; then
            echo "No changes detected."
            echo "plan-exists=false" >> $GITHUB_ENV
          elif [ $exit_code -eq 2 ]; then
            echo "Changes detected that need to be applied."
            echo "plan-exists=true" >> $GITHUB_ENV
          else
            echo "Error during plan."
            exit 1
          fi
        else
          echo "plan-exists=true" >> $GITHUB_ENV
        fi

    - name: Terraform Apply
      if: env.plan-exists == 'true'
      run: terraform apply -auto-approve tfplan
